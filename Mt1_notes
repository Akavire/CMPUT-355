  GO territory: a path can be a sequence of vertical and horizontal moves..
  2 Reach = adjacent to but not apart of ( 1 tile difference)
  3
  4 --------------
  5 Rules of Life
  6 --------------
  7 * For a space that is populated:
  8         * Each cell with one or no neighbors dies, as if by solitude
  9         * Each cell with four or more neighbors dies, as if by overpopulation
 10         * Each cell with two or three neighbors survives
 11
 12 * For a space that is empty or unpopulated:
 13         * Each cell with three neighbors becomes populated
 14 --------------
 15 Maze Traversal
 16 --------------
 17
 18 |Random Walk algorithm|
 19 current_cell = origin
 20 while current_cell != destination:
 21         current_cell = random_neighbour
 22
 23
 24 Random walk can be further implemented with a list to store already visited tiles
 25 [analysis of algorithm]
 26 * for a maze with n cells, at most n-1 iterations
 27
 28 |BFS|
 29 * List used is FIFO (queue)
 30 * remove the node appended earliest
 31
 32 |DFS (iterative)|
 33 * List is is LIFO (stack)
 34 * remove the node appended most recently
 35 * USE LEVI'S OPEN LIST METHOD ****
 36
 37 |DFS (recursive)|
 38 * recursive (recruse as soon as unseen neighbour found)
 39 * set node = seen if seen
 40 if seen = false, dfs(node)
 41
 42 nbr_offsets (up, down, left, right)
 43                 row-column
 44 --------------
 45 Sliding Tile puzzle
 46 --------------
 47 inversions: the number of inversions is the number of tile pairs (x,y) s.t when the solution is written row-by-row
 48 x appears before y but x > y
 49 ex.
 50 3 1 4 2 5 7 6 8
 51 Inversions:
 52 3 out of order with 1 and 2 --> 2 inversions
 53 1 ok
 54 4 out of order with 2       --> 1 inversions
 55 2 ok
 56 5 ok
 57 7 out of order with 6       --> 1 inversions
 58 8 ok
 59 * in laymans terms, if a number x appears before a number y and x > y, inversion, regardless if y[x+1] or y[-1]
 60
 61  ===================================
 62 |Column number|solvability condition|
 63 |===================================|
 64 |odd          |even # of inversions |
 65 |===================================
 66 |even         |blank rows parity != inverions parity
 67
 68
 69 consider:
 70 1 2 3
 71 4 5 0
 72 6 7 8
 73 blank = 0
 74 blank is on row 2, because row [6,7,8] is row 1
 75 parity of row 2 is even (cause 2 is even...)
 76 Blanks don't count when counting inversions
 77 number of states = (dimension x dimension)!
 78 number of nodes = number of states! / 2
